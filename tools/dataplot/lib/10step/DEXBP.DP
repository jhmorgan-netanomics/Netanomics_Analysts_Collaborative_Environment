. This is dataplot macro     DEXBP.DP      Major rewrite: 10/9/18 => 1/7/21
. Purpose: Generate DEX block plots
.          (= ste p 5 of the DEXPLOT.DP 10-ste p DEX analysis procedure)
. Date: 5/xx/05 => 10/9/18 => 1/7/21
. Input
.    1. k (parameter)               = Total number of plot factors
.    2. y (vector)                  = Response variable
.    3. x1, x2, x3, . . . (vectors) = Factors
.
.    4. framet (parameter)          = top    frame line (in %) (optional) (default = 90)
.    5. frameb (parameter)          = bottom frame line (in %) (optional) (default = 20)
.    6. frame (string)               = subset/except specification;. 4/16/20
.
. -----start point-----
.
print " "; print "=====> Now generating plot 5 (DEX Block Plots) <====="
.
.
. print " "
. print "From (dexbp.dp, start point)"
. print y for i = 1 1 5
. pause
.
feedback save
feedback off
printing off
let bugbp = 0
. let pausesw = 1
.
if bugbp = 1; print " "; print "---At beginning of DEX Ste p 5 (DEXBP.DP)"
  . feedback on
  . echo on
   stat v
   if pausesw = 1; pause; end if
end if
.
. -----------------------------------------
. -----Do Analysis Ste p 5: Block Plots-----
. -----------------------------------------
.
. -----Step 1.0: if frame exists, the save the original data and extract the subset-----
.
if bugbp = 1
   print "--At start of (dexbp.dp, step 1.0): if frame exists, save the original data and extract the subset"
   if frame not exist; print "      frame does not exist"; end if
   if frame exists;    print "      frame = ^frame"; end if
   print "Pre-  date saving & frame extraction:"
   stat v
   if pausesw = 1; pause; end if
end if
.
if frame exists
   call save_full_dataset.dp
   delete stallx; let stallx = string combine x1 to x^k
   retain y ^stallx ^frame
end if
.
if bugbp = 1
   print "Post-  date saving & frame extraction:"
   stat v
   if pausesw = 1; pause; end if
end if
.
. -----Step 1.1: Check for missing input values-----
.
if bugbp = 1; print "--At (dexbp.dp, step 1.1): check input"
   if pausesw = 1; pause; end if
end if
.
let string stmacro = dexbp.dp
if k not exist
   call determine_k.dp
end if
set check name output filliben
set check length output filliben
if k = 1; let iflag = check name k y x1 ; end if
if k >= 2
   let iflag = check name k y x1 to x^k
   let iflag = check equal length y x1 to x^k
end if
.
. -----Step 1.2: Copy the user's original y and x1 to xk data out to file-----
.                since y and x1 to xk may potentially be modified within this macro-----
.
if bugbp = 1; print "--At (dexbp.dp, step 1.2): save original data"
   if pausesw = 1; pause; end if
end if
.
set write format 40f15.7
write dex_original_data.dat y x1 to x^k
set write format
.
. -----Step 1.3: Check/Extract 2 levels, and map into -1 and +1-----
.                For this macro to work, the number of levels must be 1 or 2,
.                and the 2 levels must be -1 and +1.  Check for this (and fix, if need be).-----
.                If not 2 levels, then only the min and max will be used herein.-----
.                If not -1 and +1, then min => -1 and max => +1-----
.
if bugbp = 1; print "--At (dexbp.dp, step 1.3): normalize to (-1,+1)"
   if pausesw = 1; pause; end if
end if
.
let string stcall = dexbp.dp
call check_and_fix_original_data_for_2_levels_and_m1_p1.dp
.
. -----Step 2: Define plot settings-----
.
if bugbp = 1; print "--At (dexbp.dp, step 2): define plot settings"
   if pausesw = 1; pause; end if
end if
.
call dexplotinit.dp
tic offset units screen
tic offset 5 5
set frame limits offset off
let mintic maxtic = yframe y
let rangetic = maxtic-mintic
.
. -----Step 3: Define char, lines, tics, legend specs-----
.
if bugbp = 1; print "--At (dexbp.dp, step 3): char, lines, tics, legends"
   if pausesw = 1; pause; end if
end if
.
let kp1 = k+1
.
char blank all
char - +
lines solid all
.
if stylebp exists and stylebp = 2
   lines blank all
   lines solid solid
end if
.
line color blue all; if forecol exists; line color ^forecol all; end if
. line color red
line color ^levcol
. character color blue all
. character color red
character color ^levcol
.
x1tics off
x1tic labels off
.
char hw 4 3 all
legend 1 hw 4 3
tic label size 4
label size 4
.
. -----Step 4: Define label specs-----
.
if bugbp = 1; print "--At (dexbp.dp, step 4): labels"
   if pausesw = 1; pause; end if
end if
.
. y1label Mean Y
. if cy exists; . y1label Mean Y (^cy); . end if
. y1label displacement 20
. x1label Factor Combinations
. x3label
.
. -----Step 5: Define multiplot specs--
.
if bugbp = 1; print "--At (dexbp.dp, step 5): multiplot specs"
   if pausesw = 1; pause; end if
end if
.
if k > 16 and k <= 20
   multiplot 4 5
   multiplot scale factor 4
   let leftcorn = 16
else if k > 12 and k <= 16
   multiplot 4 4
   multiplot scale factor 3
   let leftcorn = 13
else if k > 9 and k <= 12
   multiplot 3 4
   multiplot scale factor 2
   let leftcorn = 9
else if k > 6 and k <= 9
   multiplot 3 3
   multiplot scale factor 2
   let leftcorn = 7
else if k > 4 and k <= 6
   multiplot 2 3
   multiplot scale factor 1.5
   let leftcorn = 4
else if k <= 4
   multiplot 2 2
   multiplot scale factor 1.5
   let leftcorn = 3
end if
.
. here
. -----Step 6: Do multi-linear fit to get ranked list of factors-----
.
if bugbp = 1; print "--At (dexbp.dp, step 6): get ranked list of factors---"
   print "k = ^k
   if pausesw = 1; pause; end if
end if
.
call get_ranked_list_of_factors.dp
.
. -----Step 7: Loop through each primary factor and GENERATE THE PLOTS-----
.
let n = number y
.
if bugbp = 1; print "--At (dexbp.dp, step 7): GENERATE THE PLOTS"
   print rlf
   print "(k,n) = (^k,^n)"
   if pausesw = 1; pause; end if
end if
.
y1label
x1label
x3label
loop for jprim = 1 1 k
   if x^jprim exists
      call get_robustness_factors.dp
      if n = 4
         mean block plot   y   x^jrob1   x^jprim   ;. <==========plot
         call annotate_boxplot_subplot.dp
      end if
      if n = 8
         mean block plot   y   x^jrob1 x^jrob2   x^jprim     ;. <==========plot
         call annotate_boxplot_subplot.dp
      end if
      if n >= 16
         . print x^jrob1 x^jrob2 x^jrob3
         . pause
         mean block plot   y   x^jrob1 x^jrob2 x^jrob3   x^jprim  ;. <==========plot
         call annotate_boxplot_subplot.dp
      end if
   end if
end loop
.
multiplot off
multiplot scale factor 1
.
. -----Step 8: Write out project, title, step-----
.
if bugbp = 1; print "--At (dexbp.dp, step 8): project, title, step"
   if pausesw = 1; pause; end if
end if
.
if project exists
   if forecol exists; color ^forecol; end if
   call dexwriteproject.dp
end if
.
hw 2 1
if titlesiz exists; let titleh = titlesiz; end if
let titlew = titleh/2
hw titleh titlew
.
color blue; if forecol exists; color ^forecol; end if
justification center
if titlesw exist and titlesw = 1 or titlesw not exist
   move 50 91; text Block Plot
end if
.
if step exists
   let step = step + 1; hw 2 1; just left; move 5 95
   . text Step ^step
   . call tagcorn.dp   9/17/18/
   if stepprsw not exist
      call tagcorn.dp
   end if
   if stepprsw exists; if stepprsw = 1
      call tagcorn.dp
   end if; end if
end if
.
. -----Step 9: Annotate-----
.
if bugbp = 1; print "--At (dexbp.dp, step 9): annotate"
   if pausesw = 1; pause; end if
end if
.
. call printtrailer.dp
.
if annotate existsl and annotate = 1
   if forecol exists; color ^forecol; end if
   call annotate.dp
end if
.
. -----Step 10: Write out right margin factor and setting info-----
.
if bugbp = 1; print "--At (dexbp.dp, step 10): right margin"
   if pausesw = 1; pause; end if
end if
.
hw 2 1
char hw 2 1 all
.
if rightmsw exists and rightmsw = 1 or rightmsw not exist
   if stx1 exists and stx1l exists
      call dexrightmargin.dp
   end if
end if
.
. -----Step 11: If called for, write out customized upper left info-----
.
if bugbp = 1; print "--At (dexbp.dp, step 11): xupper left"
   if pausesw = 1; pause; end if
end if
.
if stcorn1 exists
   call upperleft.dp
end if
.
. -----Step 98: Restore the user's original y and x1 to xk data from file-----
.
if bugbp = 1; print " "; print "---At (dexbp.dp, step 98): restore orig. data (pre-restore)"
   print y x1 to x^k
   if pausesw = 1; pause; end if
end if
.
delete y x1 to x^k
set read format 40f15.7
skip 0; read dex_original_data.dat y x1 to x^k
set read format
.
if bugbp = 1; print " "; print "---At (dexbp.dp, step 98): (post-restore)"
   print y x1 to x^k
   if pausesw = 1; pause; end if
end if
.
. -----Step 99.1: if frame exists, then restore the original data-----
.
if bugbp = 1
   print "--At start of (dexbp.dp, step 99.1): restore original data if frame existed"
   if frame not exist; print "      frame did not exist"; end if
   if frame exists;    print "      frame = ^frame"; end if
   print "Pre-  data restoration:"
   stat v
   if pausesw = 1; pause; end if
end if
.
if frame exists
   delete stallx; let stallx = string combine x1 to x^k
   delete y; delete ^stallx
   call restore_full_dataset.dp
end if
.
if bugbp = 1
   print "Post- data restoration:"
   stat v
   if pausesw = 1; pause; end if
end if
.
. -----Step 99.2: Finish up otherwise-----
.
if bugbp = 1
   print "--At (dexbp.dp, step 99.2): finishing up otherwise---"
   if pausesw = 1; pause; end if
end if
.
legend 1
x1tics on
x1tic labels on
legend 1 hw 2 1
label size 2
tic label size 2
title
y1label
y1label displacement default
x1label
.
char bl all
char color blue all
char hw 2 1 all
char offset 0 0 all
char justification cece all
lines solid all
line color blue all
.
delete dxz
.
feedback restore
.
if itime exists and itime = 1
   cpu time
   let t5 = cputime
end if
