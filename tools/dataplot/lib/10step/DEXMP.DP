. This is dataplot macro   DEXMP.DP
.
. Purpose: Generate a DEX mean plot = dex main effects plot
.          (or more generally, a dex <statmp> plot)
.          (= ste p 3 of the DEXPLOT.DP 10-ste p DEX analysis procedure)
.
. Note: Input parameters, vectors, matrices, or strings needed:
.
. Input (Required):
.    1. y (vector)                   = Response variable
.    2. x1, x2, x3, . . . (vectors)  = Factors
.    3. k (parameter)                = Total number of plot factors
.
.    4. k0 (parameter)               = Total number of base factors (not including interactions) (opt.) (def. = k)

. Input (Optional):
.    1. project (string)             = Project title to appear at top of page   (default = no title)
.    2. sty     (string)             = Name of response variable                (default = no name)
.    3. stx1, stx2, stx3, . . . (strings) = Names of the 1st, 2nd, . . .factors (default = no names)
.    4. circlesw  (parameter)        = Switch (0,1) for circles or not          (default = 1 = circles)
.    5. circleh  (parameter)         = Height of plot circles                   (default = 2)
.    6. circlew  (parameter)         = Width  of plot circles                   (default = 1)
.    7. decplace (parameter)         = # of dec. places for the effect          (default = 4)
.    8. decplacr (parameter)         = # of dec. places for the % rel. effects  (default = 0)
.    9. decplacm (parameter)         = # of dec. places for the mean            (default = 4)
.   10. titlesw  (parameter)         = (0,1) Switch for title printing          (default = 1 ==> "Main Effects Plot")
.   11. titlesiz (parameter)         = Size of title to appear at top of plot   (default = 2)
.   12. labelsiz (parameter)         = Size of label to appear at left & bottom of plot (default = 2)
.   13. writerel (parameter)         = 0 or 1 switch dictating as to whether desire Relative Effects line
.                                                                  (default = 0 = no relative effects printed)
.   14. trailsw  (parameter)         = (0,1) Switch for trailer printing
.                                                                  (default = 1 ==> print trailer (but also only i_f existent))
.
.   15. errbarsw (parameter)         = (0,1) switch dictating the plotting of error bars  <====================
.                                                                                (default = 0 = not plot error bars).
.   16. bartype (string)             = line type for the error bars (if existent)(default = solid)
.   17. shiftup (parameter)          = amount to shift up for the within frame effect annotation (def. = not exist = 0)
.   18. rightmsw (parameter)         = (0,1) switch dictating the listing of factors & levels in right margin
.   xx. strowlab (string)            = (left,right) switch dictating where |Effect|, |Rel.Eff.|, Fcdf is written out
.  (default = 1 = yes = list factors and levels, but requires existence of stx1, stx2, . . . and stx1l, stx2l, . . .)
.   21. stx1, stx2, stx3, . . . (strings) = Names of the 1st, 2nd, 3rd, . . . factors (default = no names)
.                                            (e.g., let string stx1  = OvenTemp) (default = no names) of the factors
.   22. stx1l, stx2l, stx3l, . .(strings) = Names of the 1st, 2nd, 3rd, . . . factor levels (default = no names)
.                                            (e.g., let string stx1l = 1450 1600)
.   23. stxshort (string)            = Multi-component shorter names for each factor (optional)
.   24. framet (parameter)           = top    frame line (in %) (optional)      (default = 90)
.   25. frameb (parameter)           = bottom frame line (in %) (optional)      (default = 20)
.   21. levelsw (parameter)          = switch dictating the desired type of levels
.                                         (optional, default = not exist)
.                                            1 = classic (-1,0,1) case
.                                            2 = integer (1, 2, 3, 4, ...) case
.                                            3 = pre-existing strings cas
.   22. yminmp (parameter)           = vertical axis minimum                                    (default = float)
.   23. ymaxmp (parameter)           = vertical axis maximum                                    (default = float)
.   24. statmp (string)              = name of statistic (e.g., Median, SD, etc.) (default = mean) ;. 7/10/18.
.   25. stepprsw (parameter)         = (0,1) switch to dictate whether upper left step id should be printed (default = 1 = yes) ;. 9/17/18
.   26. stylimmp (string)            = 2-item string defining personalized ylimits for plot (optional) (default = as computed)
.
.   27. levint  (parameter)          = 0,1 switch dictating whether hor. axis labels (and right margin indices) are integers (optional)
.   28. decplacm (parameter)         = vertical location where desire mean value to be printed out (optiona) (def. = 4)
.   29. ypmean (parameter)           = vertical location where desire mean value to be printed out (optiona) (default = 88)
.   30. frame (string)               = subset/except specification;. 4/16/20
.   31. stbest (string) = diretion for best: up, down, zero (optional)
. Output:
.    coefout (vector of length k)
.    tagout
.    relcoefo
.    cdfout
.
. Note: Graphics output produced = A 1-page plot: DEX Mean Plot (= Main Effects Plot)
.          Vertical   axis = Mean Response for a given level of a given factor
.          Horizontal axis = Each factor and each level within a factor
.
. Note: Graphics interpretation: I_f the mean response differs
.                                across levels within a factor,
.                                then the factor is deemed to "have an effect"
.
. Note: Macros called by this macro:
.       dexplotiniti.dp
.       dexwriteproject.dp
.       dexknbox.dp
.       tagcorn.dp
.       checkkyx.dp
.       checkinputargumentexistence.dp
.
. Date: May 2005, July 2010
.
. -----start point-----
.
print " "; print "=====> Now generating plot 3 (Main Effects Plot) <====="
.
. print " "
. print "From (dexmp.dp, start point)"
. print y for i = 1 1 5
. pause
.
feedback save
feedback off
printing off
let bugmp = 0
. let pausesw = 1
.
set write decimals
.
if bugmp = 1; print " "; print "---At beginning of DEX Ste p 3 (DEXMP.DP)"
   print "   levelsw = ^levelsw"
   print "k = ^k"
   print "frame = ^frame"
   print y x1 x2 x3
   print stx1 stx2 stx3 stx4 stx5
   print stx1l stx2l stx3l stx4l stx5l
   . feedback on
   . echo on
   if pausesw = 1; pause; end if
end if
.
. -------------------------------------------
. -----Do Analysis Ste p 3: Dex Mean Plot-----
. -------------------------------------------
.
. -----Step 1.0: if frame exists, the save the original data and extract the subset-----
.
if bugmp = 1
   print "--At start of (dexmp.dp, step 1.0): if frame exists, save the original data and extract the subset"
   if frame not exist; print "      frame does not exist"; end if
   if frame exists;    print "      frame = ^frame"; end if
   print "Pre-  date saving & frame extraction:"
   stat v
   if pausesw = 1; pause; end if
end if
.
if frame exists
   call save_full_dataset.dp
   delete stallx; let stallx = string combine x1 to x^k
   retain y ^stallx ^frame
end if
.
if bugmp = 1
   print "Post-  date saving & frame extraction:"
   stat v
   if pausesw = 1; pause; end if
end if
.
. -----Step 1.1: Check input values for existence and equivalent length-----
.
if bugmp = 1; print "--At (dexmp.dp, step 1.1): check input"
   if pausesw = 1; pause; end if
end if
.
let string stmacro = dexmp.dp
if k not exist
   call determine_k.dp
end if
set check name output filliben
set check length output filliben
if k = 1; let iflag = check name k y x1 ; end if
if k >= 2
   let iflag = check name k y x1 to x^k
   let iflag = check equal length y x1 to x^k
end if
.
loop for jz = 1 1 k
    let numlev^jz = unique x^jz
    let numlevva(jz) = numlev^jz
end of loop
let numlevto = sum numlevva
let numlevmx = maximum numlevva
let numlevmn = minimum numlevva
let numlevdi = unique numlevva
.
. -----Step 2: Define plot settings-----
.
if bugmp = 1; print "--At (dexmp.dp, step 2): plot settings "
   if pausesw = 1; pause; end if
end if
.
call dexplotinit.dp
.
let kp1 = k+1
let kp2 = k+2
.
xtic offset 0 0
xlimits 0 kp1
major x1tic number kp2
minor x1tic number 0
.
if k = 1  ;. 10/21/19
   xlim 0.8 1.2
   xtic offset 15 15
   major x1tic number 3
end if
.
if k = 2
   xlim 1 k
   xtic offset 15 15
   major x1tic number k
end if
.
if stylimmp exists; ylim ^stylimmp; end if    ;. this is a fix for occasional improper ylim   10/23/18
.
delete stxlabel
if ypxlabel not exist; let string stxlabel = x3label;  end if
if ypxlabel    exists; let string stxlabel = ^ypxlabel; end if
if bugmp = 1
   print ">>>>>"
   print "ypxlabel = ^ypxlabel"
   print "stxlabel = ^stxlabel"
   pause
end if
.
xlabel
x2label
x3label
^stxlabel Factors (^k)
^stxlabel size 3
if stprex exists
   ^stxlabel ^stprex Factors (^k)
end if
^stxlabel displacement 11
if k >= 6
   ^stxlabel displacement 13
end if
if xlabelsw = 0; x1label; x2label; x3label; end if
.
set string space ignore
let string igtempe = cr()
let string igtempo = cr()
if k >= 6
   let string igtempo = cr()
   let string igtempe = cr()sp()cr()
end if
.
let icnt = 0
if k > 2
   let icnt = 1
   let string ig1 = sp()
end if
delete stjunk igtemp2
loop for jz = 1 1 k
    let icnt = icnt + 1
    let string igtemp2 = X^jz
    let string ig^icnt = ^igtemp2
    let ieven = mod(jz,2)
    let string igtemp = ^igtempo
    if ieven = 0
       let string igtemp = ^igtempe
    end if
    if stx^jz exists
       let string stjunk = ^stx^jz
       let ig^icnt = string concatenate igtemp2 igtemp stjunk
    end if
    if stxshort exists
       let stjunk = string word stxshort jz
       let ig^icnt = string concatenate igtemp2 igtemp stjunk
    end if
    delete stjunk igtemp2
end of loop
delete igtemp
if k > 2
   let icnt = icnt + 1
   let string ig^icnt = sp()
end if
let ig = group label ig1 to ig^icnt
x1tic mark label format group label
x1tic mark label content ig
x1tic mark label on
label color blue
tic mark label color blue
tic mark color blue
if forecol exists
   label color ^forecol
   tic mark label color ^forecol
   tic mark color ^forecol
end if
.
. ylim
if yminmp exists; ymin ^yminmp; end if
if ymaxmp exists; ymax ^ymaxmp; end if
let string statmpz = Mean
if statmp exists; let string statmpz = ^statmp; end if     ;. 7/10/18
.
ytic offset 10 5
minor x1tic number 0
if levelsw exists and levelsw = 3; x1tics off; end if
.
. -----Step 3: Define character & label contents (and sizes) pre-plot-----
.
if bugmp = 1; print "--At (dexmp.dp, step 3): char, labels, sizes "
   if pausesw = 1; pause; end if
end if
.
. char X blank
char circle blank
char size 1.1 0.9
char fill on on
call setcircle.dp
char offset 0 0
char color blue all
line color blue all
if forecol exists
   char color ^forecol all
   line color ^forecol all
end if
.
lines solid dotted
.
if titlesiz exists; title size ^titlesiz; end if
.
if titlesw not exist;
   title Main Effects Plot
   if statmpz exists; if statmpz <> Mean
      title Main Effects Plot (^statmpz)
   end if; end if
end if
if titlesw exist and titlesw = 1;
   title Main Effects Plot
   if statmpz exists; if statmpz <> Mean
      title Main Effects Plot (^statmpz)
   end if; end if
end if
.
if sty not exist
   if ylabelsw not exist
      if statmp not exist; y1label Mean Response; end if
      if statmp exists; y1label ^statmp Response; end if
   end if
   if ylabelsw exist and ylabelsw = 1
      if statmp not exist; y1label Mean Response; end if
      if statmp exists; y1label ^statmp Response; end if
   end if
end if
.
if sty exists
   if statmp not exist; y1label Mean Response Y (^sty); end if
   if statmp exists; y1label ^statmp Response Y (^sty); end if
   if stpitts exists; if stpitts = pitts; y1label Mean Response ^sty; end if; end if  ;. april 27, 2020
end if
.
label size 3
if labelsiz exists; label size ^labelsiz; end if
if ticlabsi exists; tic label size ^ticlabsi; end if
.
. -----Step 4: GENERATE THE PLOT-----
.
if bugmp = 1; print "--At (dexmp.dp, step 4): GENERATE THE PLOT"
   if pausesw = 1; pause; end if
end if
.
. print statmp
. pause
.
y1label size 3
. pause
ylim
ylimits unfreeze
if statmp not exist
   if k = 1; dex mean plot y x1; end if
   if k >= 2; dex mean plot y x1 to x^k; end if;. <=====================
   . print y x1 x2
   . pause
end if
.
if statmp exists
   if k = 1; dex ^statmpz plot y x1; end if
   if k >= 2; dex ^statmpz plot y x1 to x^k; end if
   save
end if
.
skip 0
read dpst1f.dat coefz relcoefz
.
delete xplotd
let xplotd = distinct xplot
retain xplotd for i = 1 1 numlevto
let nxplot = size xplotd
.
if errbarsw exists and errbarsw = 1
   xlimits freeze
   ylimits freeze
end if
.
. -----Step 5: Write out the factor level (labels)-----
.
if bugmp = 1; print "--At (dexmp.dp, step 5): write xi labels"
   if pausesw = 1; pause; end if
end if
.
call dexmp_write_factor_levels.dp
.
. pause
.
. -----Step 6: Write out . . .-----
.
if bugmp = 1; print "--At (dexmp.dp, step 6): write xxx "
   if pausesw = 1; pause; end if
end if
.
. let bz = 12
let bz = 12.5
let bz2 = bz - 2
just cece
.
let texthz = 2
let textwz = 1
if texth exists; let texthz = texth; end if
if textw exists; let textwz = textw; end if
.
hw texthz textwz
loop for jz = 1 1 k
   let az = jz
   moveds az bz
   if suv^az exist; text ^suv^az; end if
end loop
.
. pause
.
. -----Step 8.1: For classical dex mean plot, do multiple ANOVAs, and
. -----        Write out 3 rows:  |effect|, |relative effect|, and fcdf (or pvalue)-----
.
if bugmp = 1; print "--At (dexmp.dp, step 7.1): anova"
   if pausesw = 1; pause; end if
end if
.
if statmpz = Mean
   call dexmp_anova.dp
end if
.
. -----Step 7.2: For  dex sd plot, do multiple LEVENE TESTs, and
. -----        Write out 4 rows:  max si, min si, ratio, and leven test fcdf (or pvalue)-----
.
if bugmp = 1; print "--At (dexmp.dp, step 7.2): levene"
   if pausesw = 1; pause; end if
end if
.
if statmpz = SD
   call dexmp_levene_test.dp
end if
.
. -----Step 8: If called for, plot out error bars (confidence bars)-----
.
if bugmp = 1; print "--At (dexmp.dp, step 8): conf. limits"
   if pausesw = 1; pause; end if
end if
.
if errbarsw exists and errbarsw = 1
   call computestats.dp
   let yplotlcl = yplotm - 2*yplotsdm
   let yplotucl = yplotm + 2*yplotsdm
   call ploterrorbars.dp
end if
.
. -----Step 8: If called for, draw out an arrow for "best"-----
.
if bugmp = 1; print "--At (dexmp.dp, step 8): arrow for "best"
   if pausesw = 1; pause; end if
end if
.
if stbest exists
   call dexarrow.dp
end if
.
. -----Step 21: Write out project title, (n,k) box, ybar, and "Step"-----
.
if bugmp = 1; print "--At (dexmp.dp, step 21): proj,(n,k),ybar,step,annotate"
   if pausesw = 1; pause; end if
end if
.
if project exists
   if forecol exists; color ^forecol; end if
   call dexwriteproject.dp
end if
.
call dexknbox.dp
.
let ybar = mean y
delete dpmeanzz; let dpmeanzz = 4
if decplacm exists; let dpmeanzz = decplacm; end if
set write decimals dpmeanzz; let stybarr = number to string ybar
delete ypmeanzz; . let ypmeanzz = 88; let ypmeanzz = 91
if ypmean exists; let ypmeanzz = ypmean; end if
move 85 ypmeanzz; just right; hw 2 1; text Mean = ^stybarr; just center
.
if step exists
   let step = step + 1; hw 2 1; just left; move 5 95
   . text Step ^step
   . call tagcorn.dp   9/17/18/
   if stepprsw not exist
      call tagcorn.dp
   end if
   if stepprsw exists; if stepprsw = 1
      call tagcorn.dp
   end if; end if
end if
.
if annotate exists and annotate = 1
   if forecol exists; color ^forecol; end if
   call annotate.dp
end if
.
. -----Step 22: Write out right margin factor and setting info-----
.
if bugmp = 1; print "--At (dexmp.dp, step 22): right margin"
   if pausesw = 1; pause; end if
end if
.
if rightmsw exists; print "rightmsw = ^rightmsw"; end if
.
. pause
if rightmsw exists and rightmsw = 1 or rightmsw not exist
   if stx1 exists and stx1l exists
      let ypdel = 2; let lh = 1.8; let lw = 0.9
      if k >= 9
         let ypdel = 1.5; let lh = 1.6; let lw = 0.8
         . let string colorl = red blue green black
      end if
      call dexrightmargin.dp
      delete ypdel lh lw
   end if
end if
.
. -----Step 23: If called for, write out customized upper left info-----
.
if bugmp = 1; print "--At (dexmp.dp, step 23): upper left"
   if pausesw = 1; pause; end if
end if
.
if stcorn1 exists
   . call upperleft.dp
end if
.
. -----Step 24: If called for, print out a target reference line-----
.
if bugmp = 1; print "--At (dexmp.dp, step 24): target ref. line"
   if pausesw = 1; pause; end if
end if
.
if ytarget exists
   lines dotted; drawsdsd 15 ytarget 85 ytarget
   lines solid; drawsdsd 84.25 ytarget 85.75 ytarget
   movesd 86 ytarget; move relative 0 .3; hw 2 1; just lece; text Target = ^ytarget
   just left
end if
.
. -----Step 25: Create the 4 output vectors-----
.
if bugmp = 1; print "--At (dexmp.dp, step 25): 4 output vectors"
   if pausesw = 1; pause; end if
end if
.
. stat v
. pause
. print coefz
. pause
.
let coefout = coefz
let tagout = tagz
let relcoefo = relcoefz
let cdfout = cdfz
. print tagout coefout relcoefo cdfout
. pause
.
. -----Step 31: Form conclusions and write out to file-----
.
let step = 3
call form_and_write_dex_10_step_conclusions.dp
.
. -----Step 99.1: if frame exists, then restore the original data-----
.
if bugmp = 1
   print "--At start of (dexmp.dp, step 99.1): restore original data if frame existed"
   if frame not exist; print "      frame did not exist"; end if
   if frame exists;    print "      frame = ^frame"; end if
   print "Pre-  data restoration:"
   stat v
   if pausesw = 1; pause; end if
end if
.
if frame exists
   delete stallx; let stallx = string combine x1 to x^k
   delete y; delete ^stallx
   call restore_full_dataset.dp
end if
.
if bugmp = 1
   print "Post- data restoration:"
   stat v
   if pausesw = 1; pause; end if
end if
.
. -----Step 99.2: Finish up otherwise-----
.
if bugmp = 1
   print "--At (dexmp.dp, step 99.2): finishing up otherwise"
   if pausesw = 1; pause; end if
end if
.
. note--the limits unfreeze command must be AFTER the ylimits command   11/2/1x
xlimits
ylimits
limits unfreeze
.
char blank all
char color blue all
char fill off all
char hw 2 1 all
char offset 0 0 all
char justification cece all
lines solid all
xtic offset 5 5
ytic offset 5 5
tic label format default
minor xtic number default
major xtic number default
just left
title
y1label
x1label
x3label
x1tic label on
.
region fill off  ;.   11/16/18
.
. pause
. stop
.
. feedback on
.
delete cxplotz coefz tagz relcoefz cdfz
delete dxz dxjunk
delete coefout tagout relcoefo cdfout
.
feedback restore
.
limits restore
.
if itime exists and itime = 1
   cpu time
   let t3 = cputime
end if
.
