. This is dataplot macro   DEXHPP.DP
. Purpose: Generate a DEX halfnormal probability plot
.          (= ste p 8 of the DEXPLOT.DP 10-ste p DEX analysis procedure)
. Date: May 2005
. Input
.    1. k (parameter)               = Total number of plot factors
.    2. y (vector)                  = Response variable
.    3. x1, x2, x3, . . . (vectors) = Factors
.    4. index
.
.    5. framet (parameter)          = top    frame line (in %) (optional) (default = 90)
.    6. frameb (parameter)          = bottom frame line (in %) (optional) (default = 20)
.    7. frame (string)              = subset/except specification;. 4/16/20
.
. Pre-call: dexplotinit.dp
. Caution/Danger: j will get overwritten in the lower-level called macros
.
. -----start point-----
.
print " "; print "=====> Now generating plot 8 (DEX Halfnormal Probability Plot) <====="
.
feedback save
feedback off
printing off
let bughpp = 0
let pausesw = 0
.
if bughpp = 1; print " "; print "--At beginning of DEX Ste p 8 (DEXHPP.DP)"
   print "   numeffec = ^numeffec"
   print y x1 x2 x3
   . feedback on
   . echo on
   if pausesw = 1; pause; end if
end if
.
. ---------------------------------------------------------
. -----Do Analysis Ste p 8: Halfnormal Probability Plot-----
. ---------------------------------------------------------
.
. -----Step 1.0: if frame exists, the save the original data and extract the subset-----
.
if bughpp = 1
   print "--At start of (dexhpp.dp, step 1.0): if frame exists, save the original data and extract the subset"
   if frame not exist; print "      frame does not exist"; end if
   if frame exists;    print "      frame = ^frame"; end if
   print "Pre-  date saving & frame extraction:"
   stat v
   if pausesw = 1; pause; end if
end if
.
if frame exists
   call save_full_dataset.dp
   delete stallx; let stallx = string combine x1 to x^k
   retain y ^stallx ^frame
end if
.
if bughpp = 1
   print "Post-  date saving & frame extraction:"
   stat v
   if pausesw = 1; pause; end if
end if
.
. -----Step 1.1: Check for missing input values-----
.
if bughpp = 1; print "--At (dexhpp.dp, step 1.1): check input"
   if pausesw = 1; pause; end if
end if
.
let string stmacro = dexhpp.dp
if k not exist
   call determine_k.dp
end if
set check name output filliben
set check length output filliben
if k = 1; let iflag = check name k y x1 ; end if
if k >= 2
   let iflag = check name k y x1 to x^k
   let iflag = check equal length y x1 to x^k
end if
.
. -----Step 1.2: Copy the user's original y and x1 to xk data out to file-----
.                since y and x1 to xk may potentially be modified within this macro-----
.
if bughpp = 1; print "--At (dexhpp.dp, step 1.2): save original data"
   if pausesw = 1; pause; end if
end if
.
set write format 40f15.7
write dex_original_data.dat y x1 to x^k
set write format
.
. -----Step 1.3: Check/Extract 2 levels, and map into -1 and +1-----
.                For this macro to work, the number of levels must be 1 or 2,
.                and the 2 levels must be -1 and +1.  Check for this (and fix, if need be).-----
.                If not 2 levels, then only the min and max will be used herein.-----
.                If not -1 and +1, then min => -1 and max => +1-----
.
if bughpp = 1; print "--At (dexhpp.dp, step 1.3): normalize to (-1,+1)"
   if pausesw = 1; pause; end if
end if
.
let string stcall = dexhpp.dp
call check_and_fix_original_data_for_2_levels_and_m1_p1.dp
.
. -----Step 2: Define plot settings-----
.
if bughpp = 1; print "--At (dexhpp.dp, step 2): plot settings"
   if pausesw = 1; pause; end if
end if
.
call dexplotinit.dp
.
. -----Step 3: Compute effect estimates (ordered) and confounding-----
.
if bughpp = 1; print "--At (dexhpp.dp, step 3): confounding"
   print "confsw = ^confsw"
   if pausesw = 1; pause; end if
end if
.
call compute_effect_estimates_and_confounding.dp
.
if bughpp = 1; print "--At end of step 3 of dexhpp.dp"
   print "numeff = ^numeff"
   loop for jzz = 1 1 numeff
      print steft^jzz
   end loop
   if pausesw = 1; pause; end if
   pause
end if
.
. -----Step 4: GENERATE THE PLOT-----
.
if bughpp = 1; print "--At (dexhpp.dp, step 4): GENERATE THE PLOT"
   if pausesw = 1; pause; end if
end if
.
.
char X
call setcircle.dp
.
lines bl
.
if titlesw not exist
   title Halfnormal Probability Plot of |Effects|
end if
if titlesw exist and titlesw = 1;
   title Halfnormal Probability Plot of |Effects|
end if
.
y1label Ordered |Effects|
x1label Halfnormal Distribution Order Statistic Medians
x3label
label size labelsiz
tic label size ticlabsi
.
let eff2 = abs(eff)
halfnormal probability plot eff2
.
. -----Step 5: Write out confounding structure in the right margin-----
.
if bughpp = 1; print "--At (dexhpp.dp, step 5): Write confounding on right"
   if pausesw = 1; pause; end if
end if
.
hw 2 1;. new 5/11/05
character justification lece all
character blank all
character color blue all; if forecol exists; character color ^forecol all; end if
delete xpos ypos tagzj
let ypos = yplot
let ypos = combine ypos ypos
let jstop = 2*numeff
let xpos = 90 for i = 1 1 jstop
let xpos = 86 for i = 1 1 numeff
let tagzj = sequence 1 1 jstop
loop for j = 1 1 numeff
   let jrev = numeff - j + 1
   let plot character j = ^steft^jrev:
   .
   let icnt2 = numeff + j
   let string ch = ^stefc^jrev
   if ch <> -999
      let plot character icnt2 = ^stefc^jrev
   end if
end loop
drawsd symbol xpos ypos tagzj
.
color blue; if forecol exists; color ^forecol; end if
hw 2 1
let ypz = 89.6
if framet exists; let ypz = ypz - (90 - framet); end if
move 86 ypz; just lece
text Factor: Confounding
.
. -----Step 6: Annotate the plot-----
.
if bughpp = 1; print "--At (dexhpp.dp, step 6): annotate"
   if pausesw = 1; pause; end if
end if
.
if project exists
   if forecol exists; color ^forecol; end if
   call dexwriteproject.dp
end if
.
call dexknbox.dp
.
if step exists
   let step = step + 1; hw 2 1; just left; move 5 95
   . text Step ^step
   . call tagcorn.dp   9/17/18/
   if stepprsw not exist
      call tagcorn.dp
   end if
   if stepprsw exists; if stepprsw = 1
      call tagcorn.dp
   end if; end if
end if
.
if stcorn1 exists
   call upperleft.dp
end if
.
if annotate exists and annotate = 1
   if forecol exists; color ^forecol; end if
   call annotate.dp
end if
.
. -----Step 98: Restore the user's original y and x1 to xk data from file-----
.
if bughpp = 1; print " "; print "---At (dexhpp.dp, step 98): restore orig. data (pre-restore)"
   print y x1 to x^k
   if pausesw = 1; pause; end if
end if
.
delete y x1 to x^k
set read format 40f15.7
skip 0; read dex_original_data.dat y x1 to x^k
set read format
.
if bughpp = 1; print " "; print "---At (dexhpp.dp, step 98): (post-restore)"
   print y x1 to x^k
   if pausesw = 1; pause; end if
end if
.
. -----Step 99.1: if frame exists, then restore the original data-----
.
if bughpp = 1
   print "--At start of (dexhpp.dp, step 99.1): restore original data if frame existed"
   if frame not exist; print "      frame did not exist"; end if
   if frame exists;    print "      frame = ^frame"; end if
   print "Pre-  data restoration:"
   stat v
   if pausesw = 1; pause; end if
end if
.
if frame exists
   delete stallx; let stallx = string combine x1 to x^k
   delete y; delete ^stallx
   call restore_full_dataset.dp
end if
.
if bughpp = 1
   print "Post- data restoration:"
   stat v
   if pausesw = 1; pause; end if
end if
.
. -----Step 99.2: Finish up otherwise-----
.
if bughpp = 1
   print "--At (dexhpp.dp, step 99.2): finishing up otherwise---"
   if pausesw = 1; pause; end if
end if
.
just left
limits
title
y1label
x1label
char hw 2 1 all
char offset 0 0 all
char justification cece all
.
feedback restore
.
if itime exist and itime = 1
   cpu time
   let t8 = cputime
end if
.
