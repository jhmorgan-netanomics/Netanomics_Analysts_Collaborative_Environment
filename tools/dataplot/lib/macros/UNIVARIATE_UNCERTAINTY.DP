. This is dataplot macro     univariate_uncertainty_noargs.dp         2/16/17
. Purpose: Carry out univariate uncertainty analysis: A +- B and print results
.          in 3 boxes on a new graphics page
. Date: 6/19/15, 10/8/16 ==> 10/19/16 ==> 2/16/17
. Note: This macro takes no arguments
.
. Input:
.    y     (variable) = Response variable
.    q     (string)   = subset/except string qualification                         (optional, default = all)
.    dp    (parameter)= desired number of decimal places for mean, sd, & sdm       (optional, default = 4)
.    xp    (parameter)= desired horizontal location of the left  edge of boxes     (optional, default = 20)
.    xp2   (parameter)= desired horizontal location of the right edge of boxes     (optional, default = 90)
.    yp    (parameter)= desired vertical   location (0 to 100) for start of output (optional, default = 88)
.    ypdel (parameter)= desired vertical   spacing  (0 to 100) for text output     (optional, default = 3)
.    h     (parameter)= desired height of text within box                          (optional, default = 3)
.    w     (parameter)= desired width  of text within box                          (optional, default = 1.5)
.
. Output:
.    1. Graphical: This macro will write out 3 text boxes onto a graphics page at (xp,yp)
.          1) A +- B with B =    k=95%    expanded undertainty based on s/sqrt(n)
.          2) A +- B with B =    k=2      expanded uncertainty based on s/sqrt(n)
.          3) A +- B with B =    k=2      expanded uncertainty based on s*sqrt(1 + 1/n)
.                                         (useful if have heterogeneity across bottles, labs, etc.)
.    2. Quantitative: This macro will also create the following 10 parameters for use afterwards:
.          n      = number of observations
.          m      = mean
.          sd     = standard deviation of the data
.          sdm    = standard deviation of the mean = sd/sqrt(n)
.          tfudge = 97.5% percent point of t distribution with n-1 degrees of freed
.          tfudger = rounded (3 dp) 97.5% percent point of t distribution with n-1 degrees of freed
.          unc    = tfudge*sd/sqrt(n) where tfudge = 97.5% point of t distribution with n-1 degrees of freedom
.          relunc = unc/m
.          lower  = m - unc
.          upper  = m + unc
.
. Reserved Words Within (therefore avoid using in the calling routine(s)):
.     stresp, stq, stdp, strq,   stxp, stxp2, styp, stypdel, sth, stw
.
. Example of calling program: cline121.dp
.
. -----start point-----
.
feedback save
feedback off
let bugsw = 0
.
if bugsw = 1
   print "At the beginning of     univariate_uncertainty_noargs.dp"
end if
.
. -----Step 1: Define strings to be used internally-----
.
let string stresp = y
let string stq = sp(); if q exists; let string stq = ^q; end if
let string stdp = 4; if dp exists; let string stdp = ^dp; end if
let string strq = ^stresp ^stq
.
let string stxp = 20; if xp exists; let string stxp = ^xp; end if
let string stxp2 = 90; if xp2 exists; let string stxp2 = ^xp2; end if
let string styp = 88; if yp exists; let string styp = ^yp; end if
let string stypdel = 3; if ypdel exists; let string stypdel = ^ypdel; end if
let string sth = 3; if h exists; let string sth = ^h; end if
let string stw = 1.5; if w exists; let string stw = ^w; end if
.
if bugsw = 1
   print "stresp = ^stresp"
   print "stq = ^stq"
   print "stdp = ^stdp"
   print "strq = ^strq"
   print " "
   print "stxp = ^stxp"
   print "stxp2 = ^stxp2"
   print "styp = ^styp"
   print "stypdel = ^stypdel"
   print "sth = ^sth"
   print "stw = ^stw"
   pause
end if
.
. -----Step 2: Check internal elements for external conflicts (e.g., s)-----
.
. let string stmacro = univariate_uncertainty_noargs.dp
. let string stall = n m s sdm unc relunc lower upper
. call checkconflict.dp
.
. -----Step 10: Do Analysis-----
.
. -----Step 11: Compute statistics-----
.
let n = number ^strq
let m = mean ^strq
let s = sd ^strq
let sdm = sd of mean ^strq
.
let min = minimum ^strq
let med = median ^strq
let max = maximum ^strq
.
let df = n-1
let tfudge = tppf(.975,df)
let tfudger = round(tfudge,3)
let unc = tfudge*sdm
let relunc = 100*(unc/m)
.
let unc2 = 2*sdm
let relunc2 = 100*(unc2/m)
.
let unc3 = 2*s*sqrt(1+(1/n))
let relunc3 = 100*(unc3/m)
.
. set write rewind off
print univariate_uncertainty_noargs.out "^n   ^m   ^s   ^sdm  ^tfudge ^unc   ^relunc%  ^unc2   ^relunc2%   ^unc3   ^relunc3%"
let lower = m-unc
let upper = m+unc
summary y
.
. -----Step 12: Round to desired number of decimals (default = 4)-----
.
set write decimals ^stdp
.
let stmr = number to string m
let stminr = number to string min
let stmedr = number to string med
let stmaxr = number to string max
.
let stsr = number to string s
let stsdmr = number to string sdm
.
set write decimals 2
let streluncr = number to string relunc
let strelunc2r = number to string relunc2
let strelunc3r = number to string relunc3
.
set write decimals
.
print n m s sdm
print lower m upper
print m unc relunc reluncr
. pause
.
. -----Step 13: Formally write everything out (onto a graphics page)-----
.
let xpz = ^stxp
let ypz = ^styp
let ypdelz = ^stypdel
let hz = ^sth
let wz = ^stw
.
let xprightz = ^stxp2
.
erase
. move xpz ypz; . hw 5 2.5; . just left; . text Analysis Summary
move 50 ypz; hw 5 2.5; just center; text Analysis Summary
hw 2.6 1.3; just left
let ypz = ypz - ypdelz
let ypz = ypz - ypdelz; move xpz ypz; text Number of Observations n = ^n
let ypz = ypz - ypdelz; move xpz ypz; text Mean m = ^stmr
let ypz = ypz - ypdelz; move xpz ypz; text SD(Data) s = ^stsr
let ypz = ypz - ypdelz; move xpz ypz; text SD(Mean) sdm = ^stsdmr
let ypz = ypz - ypdelz
.
let ypz = ypz - ypdelz; move xpz ypz; text Minimum min = ^stminr
let ypz = ypz - ypdelz; move xpz ypz; text Median med = ^stmedr
let ypz = ypz - ypdelz; move xpz ypz; text Mean m = ^stmr
let ypz = ypz - ypdelz; move xpz ypz; text Maximum max = ^stmaxr
let ypz = ypz - ypdelz
.
let ypz = ypz - ypdelz; move xpz ypz; text Lower 95% Confidence Bound lower = ^lower (t = ^tfudger)
let ypz = ypz - ypdelz; move xpz ypz; text Mean m = ^stmr
let ypz = ypz - ypdelz; move xpz ypz; text Upper 95% Confidence Bound upper = ^upper
let ypz = ypz - ypdelz
let ypz = ypz - 0.5*ypdelz
.
. -----Step 13.1: Write out box #1 (based on s/sqrt(n) and 95% confidence)
.
let ypz = ypz - ypdelz; move xpz ypz; text Reference Value +- 95% Expanded Uncertainty (Based on s/sqrt(n)):
let ypz = ypz - ypdelz; move xpz ypz; text ^stmr +- ^unc (^relunc%)
let ypbox1 = ypz + 2*ypdelz
let ypbox2 = ypz - 0.5*ypdelz
let xpz2 = xpz - 1
box color blue
box thickness .5
box xpz2 ypbox1 xprightz ypbox2
.
. -----Step 13.2: Write out box #2 (based on s/sqrt(n) and k=2)
.
let ypz = ypz - 1.5*ypdelz
let ypz = ypz - ypdelz; move xpz ypz; text Reference Value +- (k=2) Expanded Uncertainty (Based on s/sqrt(n)):
let ypz = ypz - ypdelz; move xpz ypz; text ^stmr +- ^unc2 (^relunc2%)
let ypbox1 = ypz + 2*ypdelz
let ypbox2 = ypz - 0.5*ypdelz
let xpz2 = xpz - 1
box color blue
box thickness .5
box xpz2 ypbox1 xprightz ypbox2
.
. -----Step 13.3: Write out box #3 (based on s*sqrt(1 + 1/n) and k=2)
.
let ypz = ypz - 1.5*ypdelz
let ypz = ypz - ypdelz; move xpz ypz; text Reference Value +- (k=2) Expanded Uncertainty (Based on s*sqrt(1 + 1/n)):
let ypz = ypz - ypdelz; move xpz ypz; text ^stmr +- ^unc3 (^relunc3%)
let ypbox1 = ypz + 2*ypdelz
let ypbox2 = ypz - 0.5*ypdelz
let xpz2 = xpz - 1
box color blue
box thickness .5
box xpz2 ypbox1 xprightz ypbox2
.
. -----Step 14: Finish up-----
.
. set write rewind on
.
print " "
print "-----------------------------------------------------------"
print "Summary stats"
print "   #obs, mean, sd(data), sd(mean), t=95% unc, t=95% rel. unc"
print "   have been written out to file"
print "   univariate_uncertainty_noargs.out"
print "-----------------------------------------------------------"
.
delete stresp stq stdp strq   stxp stxp2, styp, stypdel, sth, stw
.
list univariate_uncertainty.out
feedback restore
.
